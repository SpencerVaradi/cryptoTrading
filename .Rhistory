rbindlist(trade.history, fill = TRUE)
is.null(trade.history)
is.null(trade.history[1])
is.null(trade.history[[1]])
is.null(trade.history)
length(trade.history)
library(rlist)
install.packages("rlist")
library(rlist)
install.packages("pipeR")
library(pipeR)
validTrades <- trade.history %>>%
list.clean(recursive = TRUE)
validTrades
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
trade.history
str(trade.history)
str(validTrades)
validTrades <- trade.history %>>%
list.clean %>>%
list.stack
validTrades <- trade.history %>>%
list.clean %>>%
list.stack(fill = TRUE)
validTrades <- trade.history %>>%
list.clean
validTrades
activeInvestments
tradeHistories
balances <- ReturnBalances(poloniex.trading)
your.key
# https://steemkr.com/programming/@cryptovest/fetch-realtime-crypto-market-data-with-api-and-forecast-price-the-easy-way
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
library(quantmod)
library(data.table)
library(rlist)
library(pipeR)
cc <- fromJSON("https://min-api.cryptocompare.com/")
cc$AvailableCalls$Price$HistoDay$Info$Examples
fsym <- "USD"
tsym <- "BTC"
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
endTime <- as.integer(now() - days(7))
startTime <- as.integer(now() - days(30))# cc_histoday_btc$Data$time[1]
# btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
#               , end = endTime)
# fit_arima <- auto.arima(btc_ts)
# fc <- as.data.frame(forecast(fit_arima, 30))
# autoplot(fc)
# qplot(fc)
#
# accuracy(fit_arima)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
balances <- ReturnBalances(poloniex.trading)
balances
t(balances)
tibble(balances)
str(balances)
balances <- as.data.frame(ReturnBalances(poloniex.trading))
str(balances)
balances <- ReturnBalances(poloniex.trading)
names(balances)
currentBalances <- tibble(balances)
currentBalances
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance))
currentBalances
ticker.info
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
mutate(BTCvalue = paste0(baseCoin,"_",coins))
baseCoin <- "BTC"
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
mutate(BTCvalue = paste0(baseCoin,"_",coins))
currentBalances
tbl_df(ticker.info)
ticker.info$pair <- rownames(ticker.info)
ticker.info
tbl_df(ticker.info)
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
left_join(ticker.info)
currentBalances
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance), pair = paste0(targetCoin,"_",coins)) %>%
left_join(ticker.info)
targetCoin <- "BTC"
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance), pair = paste0(targetCoin,"_",coins)) %>%
left_join(ticker.info)
currentBalances
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select(usdTotalBalance_cols)
targetTotalBalance <- ReturnBalances(poloniex.trading)
balances
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select(usdTotalBalance_cols)
vignette("nse")
usdTotalBalance <- targetTotalBalance %>%
select_vars(usdTotalBalance_cols)
usdTotalBalance <- targetTotalBalance %>%
select_vars(usdTotalBalance_cols)
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select_vars(names(targetTotalBalance), usdTotalBalance_cols)
?shinydashboard
library(shiny)
library(shinydashboard)
ticker.info
runApp('scripts')
ticker.info <- ReturnTicker(poloniex.public)
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info <- ReturnTicker(poloniex.public)
ticker.info$pair <- rownames(ticker.info)
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info
unique(ticker.info$to)
unique(ticker.info$from)
pair
rm(pair)
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info
rm(pair)
unique(ticker.info$from)
gsub
?gsub
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_*",pair))
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("._*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("._*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\\_*","",pair))
ticker.info
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\\._*","",pair))
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\_*","",pair))
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.","",pair))
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.*","",pair))
ticker.info$from
runApp('scripts')
ticker.info <- ReturnTicker(poloniex.public)
ticker.info$pair <- rownames(ticker.info)
ticker.info <- tbl_df(ticker.info) %>%
mutate(BaseCoin = gsub("_.*","",pair), Coin = gsub("*._","",pair))
ticker.info
names(ticker.info)
ticker.info["BaseCoin"]
unique(ticker.info["BaseCoin"])
save(ticker.info,file = "tickerInfo.RDS")
load("tickerInfo.RDS")
runApp('scripts')
library(kable)
install.packages("kable")
library(kable)
install.packages("kableExtra")
library(kableExtra)
runApp('scripts')
library(shiny)
library(shinydashboard)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
library(quantmod)
library(data.table)
library(rlist)
library(pipeR)
library(kableExtra)
library(knitr)
cc <- fromJSON("https://min-api.cryptocompare.com/")
cc$AvailableCalls$Price$HistoDay$Info$Examples
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
library(shiny)
library(shinydashboard)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
library(quantmod)
library(data.table)
library(rlist)
library(pipeR)
library(kableExtra)
library(knitr)
cc <- fromJSON("https://min-api.cryptocompare.com/")
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
endTime <- as.integer(now() - days(7))
startTime <- as.integer(now() - days(30))# cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime , end = endTime)
fit_arima <- auto.arima(btc_ts)
library(quantmod)
poloniex.public
poloniex.public$returnCurrencies
poloniex.public$returnCurrencies()
returnCurrencies()
ReturnCurrencies()
returnCurrencies(poloniex.public)
ReturnCurrencies(poloniex.public)
currencies <- ReturnCurrencies(poloniex.public)
rownames(currencies)
runApp('global.R')
poloniex.public
library(shiny)
library(shinydashboard)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
library(quantmod)
library(data.table)
library(rlist)
library(pipeR)
library(kableExtra)
library(knitr)
poloniex.public
poloniex.public <- PoloniexPublicAPI()
runApp('global.R')
traceback()
runApp('global.R')
today()
as.POSIXct(today())
?dateRangeInput
runApp('global.R')
traceback()
runApp('private/9650814-6abe28d15abc4d8ede99879ef06d76b2869a18cd')
Sys.Date()
runApp('global.R')
traceback()
runApp('global.R')
### Test data
pair <- 'BTC_ETC'
from <- as.POSIXct(as.character(Sys.Date() - 30))
to <- as.POSIXct(as.character(Sys.Date()))
### Test data
pair <- 'BTC_ETC'
from <- as.POSIXct(as.character(Sys.Date() - 30))
to <- as.POSIXct(as.character(Sys.Date()))
period <- '1H'
chart.plot <- chart_Series(chart.data[, 'close'],
type = input$chart_type,
name = pair,
subset = paste0(from,'/',to))
chart.data
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = as.character(input$chart_period))
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = as.character(period))
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = as.character(period))
period <- '4H'
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = as.character(period))
chart.plot <- chart_Series(chart.data[, 'close'],
type = input$chart_type,
name = pair,
subset = paste0(from,'/',to))
type <- 'line'
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = as.character(period))
chart.plot <- chart_Series(chart.data[, 'close'],
type = input$chart_type,
name = pair,
subset = paste0(from,'/',to))
chart.plot <- chart_Series(chart.data[, 'close'],
type = type,
name = pair,
subset = paste0(from,'/',to))
chart.plot <- add_MACD()
chart.plot <- add_BBands()
chart.plot <- add_RSI()
output$chart <- renderPlot({chart.plot})
chart.plot
runApp('global.R')
traceback()
pair
from
to
period
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = period)
chart.data
runApp('global.R')
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = period)
chart.plot <- chart_Series(chart.data[, 'close'],
type = type,
name = pair)# ,
runApp('global.R')
?chart_Series
runApp('global.R')
chart.plot <- chart_Series(chart.data[, "close"],
type   = "line",
name   = "BTC_ETH",
subset = "201705/201708")
library(poloniexR)
library(PoloniexR)
library(quantmod)
Sys.setenv(tz="UTC")
pair    <- "BTC_ETH"
from    <- as.POSIXct("2015-01-01 00:00:00 UTC")
to      <- as.POSIXct("2018-04-09 00:00:00 UTC")
period  <- "4H"
chart.data <- ReturnChartData(theObject = poloniex.public,
pair      = pair,
from      = from,
to        = to,
period    = period)
poloniex.public <- PoloniexPublicAPI()
chart.data <- ReturnChartData(theObject = poloniex.public,
pair      = pair,
from      = from,
to        = to,
period    = period)
chart.plot <- chart_Series(chart.data[, "close"],
type   = "line",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot
chart.plot <- chart_Series(chart.data[, "close"],
type   = "candlestick",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot
chart.plot <- chart_Series(chart.data[, "close"],
type   = "candlesticks",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot
chart.plot <- chart_Series(chart.data[, "close"],
#type   = "candlesticks",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot
?chart_Series
chart.data
head(chart.data)
install.packages('tidyquant')
library(PoloniexR)
library(quantmod)
library(tidyquant)
# Use FANG data set
data("FANG")
# Get AAPL and AMZN Stock Prices
AAPL <- tq_get("AAPL", get = "stock.prices", from = "2015-09-01", to = "2016-12-31")
head(AAPL)
head(chart.data)
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
geom_ma(ma_fun = SMA, n = 50, linetype = 5, size = 1.25) +
geom_ma(ma_fun = SMA, n = 200, color = "red", size = 1.25) +
labs(title = "AAPL Candlestick Chart",
subtitle = "50 and 200-Day SMA",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(24), end),
ylim = c(100, 120)) +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_barchart(aes(open = open, high = high, low = low, close = close)) +
geom_ma(ma_fun = EMA, n = 50, wilder = TRUE, linetype = 5, size = 1.25) +
geom_ma(ma_fun = EMA, n = 200, wilder = TRUE, color = "red", size = 1.25) +
labs(title = "AAPL Bar Chart",
subtitle = "50 and 200-Day EMA",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(24), end),
ylim = c(100, 120)) +
theme_tq()
AAPL
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
chart.data %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
chart.data
str(chart.data)
tibble(chart.data)
as_tibble(chart.data)
chart.plot <- as.tibble(chart_Series(chart.data[, "close"],
#type   = "candlesticks",
name   = "BTC_ETH",
subset = "201705/201708"))
chart.data <- as_tibble(ReturnChartData(theObject = poloniex.public,
pair      = pair,
from      = from,
to        = to,
period    = period))
chart.data %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
chart.data
chart.data <- ReturnChartData(theObject = poloniex.public,
pair      = pair,
from      = from,
to        = to,
period    = period)
str(chart.data)
a <- as_tibble(chart.data, date = rownames(chart.data))
a
a <- as_tibble(data.frame(date = rownames(chart.data), coredata(chart.plot)))
coredata(chart.plot)
rownames(chart.data)
chart.data
str(chart.data)
a <- data.frame(chart.data)
str(a)
rownames(chart.data)
str(unlist(chart.data))
dimnames(chart.data)
chart.data
head(chart.data)
rownames(chart.data)
index(chart.data)
a <- as_tibble(data.frame(date = index(chart.data), coredata(chart.plot)))
a <- as_tibble(data.frame(date = index(chart.data), data.frame(chart.plot)))
a <- as_tibble(data.frame(date = index(chart.data), coredata(chart.data)))
a
a %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
