endTime <- as.integer(now() - years(5))
startTime <- cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
fit_arima <- auto.arima(btc_ts)
autoplot(forecast(fit_arima, 50))
accuracy(fit_arima)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
cc <- fromJSON("https://min-api.cryptocompare.com/")
cc$AvailableCalls$Price$HistoDay$Info$Examples
fsym <- "USD"
tsym <- "BTC"
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
endTime <- as.integer(now() - days(7))
startTime <- cc_histoday_btc$Data$time[1] # as.integer(now() - months(1))# cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
#             , end = endTime)
fit_arima <- auto.arima(btc_ts)
btc_ts
startTime <- as.integer(now() - months(1))# cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
#             , end = endTime)
fit_arima <- auto.arima(btc_ts)
autoplot(forecast(fit_arima, 50))
accuracy(fit_arima)
as.integer(now() - months(1))
fit_arima
forecast(fit_arima, 50)
day(1513781843)
ymd(1513781843)
ymd("1513781843")
date("1513781843")
date(1513781843)
as.double(1513781843)
as.date(1513781843)
as.Date(1513781843)
?as.Date
as.Date(1513781843, tz = "UTC")
as.Date("1513781843")
as.Date(1513781843, origin = "1960-01-01")
as_date(1513781843)
as.POSIXct(today())
str(fit_arima)
as.integer(now())
as_datetime(1516458014)
startTime
as_datetime(1513779051)
endTime <- as.integer(now() - days(7))
startTime <- as.integer(now() - days(30))# cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
#             , end = endTime)
fit_arima <- auto.arima(btc_ts)
autoplot(forecast(fit_arima, 30))
endTime <- as.integer(now() - days(7))
startTime <- as.integer(now() - days(30))# cc_histoday_btc$Data$time[1]
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime,
end = endTime)
fit_arima <- auto.arima(btc_ts)
?ts
btc_ts
str(btc_ts)
endTime
btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
fit_arima <- auto.arima(btc_ts)
autoplot(forecast(fit_arima, 30))
fc <- forecast(fit_arima, 30)
fc
qplot(fc)
str(fc)
as.data.frame(fc)
fc <- as.data.frame(forecast(fit_arima, 30))
autoplot(fc)
qplot(fc)
install.packages("PoloniexR")
library(PoloniexR)
poloniex.public <- PoloniexPublicAPI()
ticker.info <- ReturnTicker(poloniex.public)
head(ticker.info)
head(ticker.info)[50]
head(ticker.info, 50)
volume.info <- Return24hVolume(poloniex.public)
head(volume.info)
volume.info$volume.totals
order.book <- ReturnOrderBook(poloniex.public,
pair = pair,
depth = depth)
pair <- "BTC_NXT"
depth <- 10
order.book <- ReturnOrderBook(poloniex.public,
pair = pair,
depth = depth)
head(order.book)
head(order.book$id)
head(order.book$bid)
order.book$frozen
order.book$seq
order.book <- ReturnOrderBook(poloniex.public,
pair = pair,
depth = depth)
order.book$BTC_ETH$bid
order.book
pair <- "all"
depth <- 10
order.book <- ReturnOrderBook(poloniex.public,
pair = pair,
depth = depth)
order.book$BTC_ETH$bid
order.book$BTC_ETH$ask
order.book$BTC_ETH$frozen
order.book$BTC_ETH$seq
Sys.setenv(tz="EDT")
Sys.setenv(tz="UTC")
pair   <- "BTC_ETH"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
to = to)
tail(trades.data)
Sys.setenv(tz="UTC")
pair   <- "BTC_ETH"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
period <- "4H"
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = period)
tail(chart.data)
library(quantmod)
chart.plot <- chart_Series(chart.data[,"close"],
type = "line",
name = "BTC_ETH",
subset = "201705/201708")
chart.plot <- add_MACD()
chart.plot <- chart_Series(chart.data[,"close"],
type = "line",
name = "BTC_ETH",
subset = "201700/201708")
chart.plot <- add_MACD()
traceback()
?add_MACD()
chart.plot <- chart_Series(chart.data[, "close"],
type   = "line",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot <- add_MACD()
chart.plot <- add_BBands()
chart.plot <- add_RSI()
chart.plot
Sys.setenv(tz="UTC")
pair   <- "BTC_ETH"
from   <- as.POSIXct("2015-01-01 00:00:00 UTC")
to     <- as.POSIXct("2018-04-09 00:00:00 UTC")
period <- "4H"
chart.data <- ReturnChartData(theObject = poloniex.public,
pair = pair,
from = from,
to = to,
period = period)
tail(chart.data)
library(quantmod)
chart.plot <- chart_Series(chart.data[, "close"],
type   = "line",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot <- add_MACD()
chart.plot <- add_BBands()
chart.plot <- add_RSI()
chart.plot
currencies <- ReturnCurrencies(poloniex.public)
head(currencies)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
poloniex.trading
balances <- ReturnBalances(poloniex.trading)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
balances
balances <- ReturnCompleteBalances(poloniex.trading)
head(balances)
balances
##########################
# returnDepositAddresses #
##########################
?ProcessTradingRequest
poloniex.trading@commands$returnDepositAddresses
deposit.addresses <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositAddresses)
deposit.addresses
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC"))),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC")))
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
GetPoloniexTradingCommands(poloniex.trading)
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "XMR_BTC"))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
open.orders.all
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "BTC_XMR"))
trade.history.all
##############################
### ReturnOrderTrades ########
##############################
order.trades <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOrderTrades,
args    = list(orderNumber = 1))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC"))),
end          = as.numeric(as.POSIXct("2018-01-01 00:00:00 UTC")))
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-01 00:00:00 UTC"))))
trade.history
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "all",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
str(trade.history)
as.data.frame(trade.history)
as.data.frame(trade.history$BTC_ETC)
str(as.data.frame(trade.history$BTC_ETC))
as.data.frame.list(trade.history$BTC_ETC)
str(trade.history$BTC_ETC)
rbind(trade.history$BTC_ETC)
rbind(trade.history$BTC_ETC, fill = TRUE)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(data.table)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
rbindlist(trade.history, fill = TRUE)
rbindlist(trade.historyBTC_ETC, fill = TRUE)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(dplyr)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
activeInvestments <- tbl()
activeInvestments <- tbl_df()
activeInvestments <- tibble()
library(quantmod)
head(trade.history)
tail(trades.data)
pair   <- "All"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
to = to)
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
to = to)
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
from = from,
to = to)
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = tom))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = tom))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
balances <- ReturnCompleteBalances(poloniex.trading)
head(balances)
##########################
# returnDepositAddresses #
##########################
?ProcessTradingRequest
deposit.addresses <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositAddresses)
#########################
# generateNewAddress ####
#########################
new.address <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$generateNewAddress,
args    = list(currency = "BTC"))
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "all",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
trade.history
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(data.table)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
names(trade.history)
str(trade.history)
rbindlist(trade.history)
rbindlist(trade.history, fill = TRUE)
rbindlist(trade.history, fill = FALSE)
rbindlist(trade.history, fill = TRUE)
is.null(trade.history)
is.null(trade.history[1])
is.null(trade.history[[1]])
is.null(trade.history)
length(trade.history)
library(rlist)
install.packages("rlist")
library(rlist)
install.packages("pipeR")
library(pipeR)
validTrades <- trade.history %>>%
list.clean(recursive = TRUE)
validTrades
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
trade.history
str(trade.history)
str(validTrades)
validTrades <- trade.history %>>%
list.clean %>>%
list.stack
validTrades <- trade.history %>>%
list.clean %>>%
list.stack(fill = TRUE)
validTrades <- trade.history %>>%
list.clean
validTrades
