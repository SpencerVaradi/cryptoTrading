chart.plot <- chart_Series(chart.data[, "close"],
type   = "line",
name   = "BTC_ETH",
subset = "201705/201708")
chart.plot <- add_MACD()
chart.plot <- add_BBands()
chart.plot <- add_RSI()
chart.plot
currencies <- ReturnCurrencies(poloniex.public)
head(currencies)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
poloniex.trading
balances <- ReturnBalances(poloniex.trading)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
balances
balances <- ReturnCompleteBalances(poloniex.trading)
head(balances)
balances
##########################
# returnDepositAddresses #
##########################
?ProcessTradingRequest
poloniex.trading@commands$returnDepositAddresses
deposit.addresses <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositAddresses)
deposit.addresses
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC"))),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC")))
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
GetPoloniexTradingCommands(poloniex.trading)
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "XMR_BTC"))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
open.orders.all
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "BTC_XMR"))
trade.history.all
##############################
### ReturnOrderTrades ########
##############################
order.trades <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOrderTrades,
args    = list(orderNumber = 1))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC"))),
end          = as.numeric(as.POSIXct("2018-01-01 00:00:00 UTC")))
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-01 00:00:00 UTC"))))
trade.history
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "BTC_ETH",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "all",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
str(trade.history)
as.data.frame(trade.history)
as.data.frame(trade.history$BTC_ETC)
str(as.data.frame(trade.history$BTC_ETC))
as.data.frame.list(trade.history$BTC_ETC)
str(trade.history$BTC_ETC)
rbind(trade.history$BTC_ETC)
rbind(trade.history$BTC_ETC, fill = TRUE)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(data.table)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
rbindlist(trade.history, fill = TRUE)
rbindlist(trade.historyBTC_ETC, fill = TRUE)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(dplyr)
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
activeInvestments <- tbl()
activeInvestments <- tbl_df()
activeInvestments <- tibble()
library(quantmod)
head(trade.history)
tail(trades.data)
pair   <- "All"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
to = to)
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
to = to)
trades.data <- ReturnTradeHistory(theObject = poloniex.public,
pair = pair,
from = from,
to = to)
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = tom))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = tom))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
poloniex.trading <- PoloniexTradingAPI(key    = key,
secret = secret)
balances <- ReturnBalances(poloniex.trading)
head(balances)
balances <- ReturnCompleteBalances(poloniex.trading)
head(balances)
##########################
# returnDepositAddresses #
##########################
?ProcessTradingRequest
deposit.addresses <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositAddresses)
#########################
# generateNewAddress ####
#########################
new.address <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$generateNewAddress,
args    = list(currency = "BTC"))
##############################
# returnDepositsWithdrawals ##
##############################
account.activity <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnDepositsWithdrawals,
args = list(start = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end   = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
##############################
### returnOpenOrders #########
##############################
open.orders <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "BTC_XMR"))
open.orders.all <- ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnOpenOrders,
args    = list(currencyPair = "all"))
##############################
### Return Trade History #####
##############################
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = "all",
start        = as.numeric(as.POSIXct("2017-01-01 00:00:00 UTC")),
end          = as.numeric(as.POSIXct("2018-01-20 00:00:00 UTC"))))
trade.history
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = from,
end          = to))
Sys.setenv(tz="UTC")
pair   <- "all"
from   <- as.POSIXct("2017-07-01 00:00:00 UTC")
to     <- as.POSIXct("2017-07-04 00:00:00 UTC")
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
trade.history
rbindlist(trade.history$BTC_ETC, fill = TRUE)
library(data.table)
rbindlist(trade.history$BTC_ETC, fill = TRUE)
names(trade.history)
str(trade.history)
rbindlist(trade.history)
rbindlist(trade.history, fill = TRUE)
rbindlist(trade.history, fill = FALSE)
rbindlist(trade.history, fill = TRUE)
is.null(trade.history)
is.null(trade.history[1])
is.null(trade.history[[1]])
is.null(trade.history)
length(trade.history)
library(rlist)
install.packages("rlist")
library(rlist)
install.packages("pipeR")
library(pipeR)
validTrades <- trade.history %>>%
list.clean(recursive = TRUE)
validTrades
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
validTrades <- trade.history %>>%
list.clean
validTrades
trade.history
# no range specified: limit to one day
trade.history.all <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args    = list(currencyPair = "all"))
trade.history.all
trade.history <-  ProcessTradingRequest(poloniex.trading,
command = poloniex.trading@commands$returnTradeHistory,
args = list(currencyPair = pair,
start        = as.numeric(from,
end          = as.numeric(to))))
trade.history
str(trade.history)
str(validTrades)
validTrades <- trade.history %>>%
list.clean %>>%
list.stack
validTrades <- trade.history %>>%
list.clean %>>%
list.stack(fill = TRUE)
validTrades <- trade.history %>>%
list.clean
validTrades
activeInvestments
tradeHistories
balances <- ReturnBalances(poloniex.trading)
your.key
# https://steemkr.com/programming/@cryptovest/fetch-realtime-crypto-market-data-with-api-and-forecast-price-the-easy-way
library(jsonlite)
library(ggplot2)
library(forecast)
library(lubridate)
library(PoloniexR)
library(dplyr)
library(quantmod)
library(data.table)
library(rlist)
library(pipeR)
cc <- fromJSON("https://min-api.cryptocompare.com/")
cc$AvailableCalls$Price$HistoDay$Info$Examples
fsym <- "USD"
tsym <- "BTC"
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
endTime <- as.integer(now() - days(7))
startTime <- as.integer(now() - days(30))# cc_histoday_btc$Data$time[1]
# btc_ts <- ts(cc_histoday_btc$Data$close, start = startTime)
#               , end = endTime)
# fit_arima <- auto.arima(btc_ts)
# fc <- as.data.frame(forecast(fit_arima, 30))
# autoplot(fc)
# qplot(fc)
#
# accuracy(fit_arima)
key    = "YC7C2WW1-6B437QS2-A6RP9UXO-3Y5G4XUS"
secret = "faedae3e85145dbd895bb497328c1c16a9219768921f736258bcb3b800e2763e6fba58a0bf747ddd2888c27858037f7681d9072e8420b13f2a2b329c1eba834a"
balances <- ReturnBalances(poloniex.trading)
balances
t(balances)
tibble(balances)
str(balances)
balances <- as.data.frame(ReturnBalances(poloniex.trading))
str(balances)
balances <- ReturnBalances(poloniex.trading)
names(balances)
currentBalances <- tibble(balances)
currentBalances
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance))
currentBalances
ticker.info
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
mutate(BTCvalue = paste0(baseCoin,"_",coins))
baseCoin <- "BTC"
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
mutate(BTCvalue = paste0(baseCoin,"_",coins))
currentBalances
tbl_df(ticker.info)
ticker.info$pair <- rownames(ticker.info)
ticker.info
tbl_df(ticker.info)
TotalBalance <- ReturnBalances(poloniex.trading)
currentBalances <- tibble(balances)
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance)) %>%
left_join(ticker.info)
currentBalances
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance), pair = paste0(targetCoin,"_",coins)) %>%
left_join(ticker.info)
targetCoin <- "BTC"
currentBalances <- currentBalances %>%
mutate(coins = names(TotalBalance), pair = paste0(targetCoin,"_",coins)) %>%
left_join(ticker.info)
currentBalances
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select(usdTotalBalance_cols)
targetTotalBalance <- ReturnBalances(poloniex.trading)
balances
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select(usdTotalBalance_cols)
vignette("nse")
usdTotalBalance <- targetTotalBalance %>%
select_vars(usdTotalBalance_cols)
usdTotalBalance <- targetTotalBalance %>%
select_vars(usdTotalBalance_cols)
usdTotalBalance_cols <- c("balances","coins","pair","last")
usdTotalBalance <- targetTotalBalance %>%
select_vars(names(targetTotalBalance), usdTotalBalance_cols)
?shinydashboard
library(shiny)
library(shinydashboard)
ticker.info
runApp('scripts')
ticker.info <- ReturnTicker(poloniex.public)
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info <- ReturnTicker(poloniex.public)
ticker.info$pair <- rownames(ticker.info)
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info
unique(ticker.info$to)
unique(ticker.info$from)
pair
rm(pair)
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = strsplit(pair, "_")[2], to = strsplit(pair, "_")[1])
ticker.info
rm(pair)
unique(ticker.info$from)
gsub
?gsub
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_*",pair))
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("._*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("._*","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.","",pair))
ticker.info
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\\_*","",pair))
ticker.info
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\\._*","",pair))
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("\_*","",pair))
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.","",pair))
ticker.info$from
ticker.info <- tbl_df(ticker.info) %>%
mutate(from = gsub("_.*","",pair))
ticker.info$from
runApp('scripts')
ticker.info <- ReturnTicker(poloniex.public)
ticker.info$pair <- rownames(ticker.info)
ticker.info <- tbl_df(ticker.info) %>%
mutate(BaseCoin = gsub("_.*","",pair), Coin = gsub("*._","",pair))
ticker.info
names(ticker.info)
ticker.info["BaseCoin"]
unique(ticker.info["BaseCoin"])
save(ticker.info,file = "tickerInfo.RDS")
load("tickerInfo.RDS")
runApp('scripts')
library(kable)
install.packages("kable")
library(kable)
install.packages("kableExtra")
library(kableExtra)
runApp('scripts')
